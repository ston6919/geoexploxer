# Generated by Django 4.2.23 on 2025-08-15 20:47

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0002_alter_customuser_date_joined_alter_customuser_email_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the AI model (e.g., GPT-4, Claude, Gemini)', max_length=100, unique=True)),
                ('provider', models.CharField(help_text='Provider of the model (e.g., OpenAI, Anthropic, Google)', max_length=100)),
                ('version', models.CharField(blank=True, help_text='Model version if applicable', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this model is currently being monitored')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='SearchTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(help_text='The search term to monitor', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of why this term is important')),
                ('is_active', models.BooleanField(default=True, help_text='Whether to actively monitor this term')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('business_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_terms', to='users.businessprofile')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('business_profile', 'term')},
            },
        ),
        migrations.CreateModel(
            name='SearchLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.TextField(help_text='The actual query sent to the AI model')),
                ('response', models.TextField(help_text='The response from the AI model')),
                ('business_mentioned', models.BooleanField(default=False, help_text='Whether the business was mentioned in the response')),
                ('mention_context', models.TextField(blank=True, help_text='Context around the business mention')),
                ('sentiment', models.CharField(blank=True, choices=[('positive', 'Positive'), ('neutral', 'Neutral'), ('negative', 'Negative'), ('mixed', 'Mixed')], help_text='Sentiment of the mention', max_length=20)),
                ('confidence_score', models.DecimalField(blank=True, decimal_places=2, help_text='Confidence in sentiment analysis (0-1)', max_digits=3, null=True)),
                ('search_timestamp', models.DateTimeField(auto_now_add=True)),
                ('response_time_ms', models.IntegerField(blank=True, help_text='Response time in milliseconds', null=True)),
                ('tokens_used', models.IntegerField(blank=True, help_text='Number of tokens used in the request', null=True)),
                ('user_agent', models.CharField(blank=True, help_text='User agent of the request', max_length=500)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the request', null=True)),
                ('ai_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_logs', to='users.aimodel')),
                ('business_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_logs', to='users.businessprofile')),
                ('search_term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_logs', to='users.searchterm')),
            ],
            options={
                'ordering': ['-search_timestamp'],
            },
        ),
    ]
